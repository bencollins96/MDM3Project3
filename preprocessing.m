function [new_prof_vals, det_prof_vals,sam_prof_vals, str_params, num_params] = preprocessing()

    %% Import data from text file.
    % Script for importing data from the following text file:
    %
    %    loop_data_20170207-0210to0310.csv
    %
    % Auto-generated by MATLAB on 2017/02/11 15:24:31

    %% Initialize variables. (may need to change filename)
    
    file = 'Copy of loop_data_20170207-0210to0310';
    filename = 'Copy of loop_data_20170207-0210to0310.csv';
    delimiter = ',';
    startRow = 2;

    %% Format for each line of text:
    %   column1: text (%q)
    %	column2: text (%q)
    %   column3: double (%f)
    %	column4: double (%f)
    %   column5: double (%f)
    %	column6: text (%q)
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%q%q%f%f%f%q%[^\n\r]';

    %% Open the text file and read columns of data according to the specified format.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool. Then Close the file again.
    
    fileID = fopen(filename,'r');
    dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    fclose(fileID);

    %% Allocate imported array to column variable names
    time_stamp = dataArray{:, 1};
    loop_id = dataArray{:, 2};
    sample_period = dataArray{:, 3};
    profile_length = dataArray{:, 4};
    max_detuning = dataArray{:, 5};
    profile_values = dataArray{:, 6};

    %% Clear temporary variables
    clearvars filename delimiter startRow formatSpec fileID dataArray ans;
    
    %% Use the previous code to convert the profile values into something more useable.
    % These were in the format ['1','100','143',....].
    new_prof_vals = {length(profile_values)};
    for i = 1:length(profile_values)

        profile  = profile_values{i};
        profile  = regexprep(profile,'[','');
        profile  = regexprep(profile,']','');
        profile  = regexprep(profile,'''','');
        profile  = regexprep(profile,' '    , '');
        profile = strsplit(profile,',');
        result = cellfun(@str2num, profile, 'UniformOutput', false);
        result = cell2mat(result);
        new_prof_vals{i} = result;
    end
    
    %% Including the max-detuning.
    %  Must multiply the prof_vals by the maximum detuning to obtain the
    %  'real' profile values.
    
    det_prof_vals = {length(new_prof_vals)};
    for i = 1:length(new_prof_vals)
        det_prof_vals{i} = new_prof_vals{i}*max_detuning(i);
    end
    
    %% Include the sample period. 
    % This could be included in the loop above but for clarity and laziness
    % sake, i'll leave it here. To take care of the sample period. I first
    % made a vector increasing in jumps of the sample period so 0,4,8...
    % Then i made the new one that it should be 0,1,2,3. And interpolated
    % the real values for the new time. This makes each time series
    % comparable.
   
    sam_prof_vals={};
    
    for i =1:length(new_prof_vals)
        old_time = [0:sample_period(i):(profile_length(i)-1)*sample_period(i)];
        new_time = [0:(profile_length(i)-1)*sample_period(i)];
        sam_prof_vals{i} = interp1(old_time, det_prof_vals{i}, new_time);
    end
        
    %% Demonstration (all data starts from 1 now too)
    %  Passing the data out for usage. There might be a better way...
    %
    str_params = [time_stamp, loop_id];
    num_params = [sample_period, profile_length, max_detuning];
    save(file, 'sam_prof_vals', 'str_params','num_params');
    
end
    



