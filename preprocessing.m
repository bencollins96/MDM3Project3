function [profile_values] = preprocessing()

    %% Import data from text file.
    % Script for importing data from the following text file:
    %
    %    loop_data_20170207-0210to0310.csv
    %
    % Auto-generated by MATLAB on 2017/02/11 15:24:31

    %% Initialize variables. (may need to change filename)
    filename = 'loop_data_20170207-0210to0310.csv';
    delimiter = ',';
    startRow = 2;

    %% Format for each line of text:
    %   column1: text (%q)
    %	column2: text (%q)
    %   column3: double (%f)
    %	column4: double (%f)
    %   column5: double (%f)
    %	column6: text (%q)
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%q%q%f%f%f%q%[^\n\r]';

    %% Open the text file.
    fileID = fopen(filename,'r');

    %% Read columns of data according to the format.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

    %% Close the text file.
    fclose(fileID);

    %% Post processing for unimportable data.
    % No unimportable data rules were applied during the import, so no post
    % processing code is included. To generate code which works for
    % unimportable data, select unimportable cells in a file and regenerate the
    % script.

    %% Allocate imported array to column variable names
    time_stamp = dataArray{:, 1};
    loop_id = dataArray{:, 2};
    sample_period = dataArray{:, 3};
    profile_length = dataArray{:, 4};
    max_detuning = dataArray{:, 5};
    profile_values = dataArray{:, 6};


    %% Clear temporary variables
    clearvars filename delimiter startRow formatSpec fileID dataArray ans;
    
    %% Use the previus code to convert the profile values into something more useable
    new_prof_vals = {length(profile_values)};
    for i = 1:length(profile_values)

        profile  = profile_values{i};
        profile  = regexprep(profile,'[','');
        profile  = regexprep(profile,']','');
        profile  = regexprep(profile,'''','');
        profile  = regexprep(profile,' '    , '');
        profile = strsplit(profile,',');
        result = cellfun(@str2num, profile, 'UniformOutput', false);
        result = cell2mat(result);
        new_prof_vals{i} = result;
    end
    
    %% Demonstraion (all data starts from 1 now too)
    %  most of this should be in a more usuable format now
    datapoint = 10;
    time_stamp(datapoint)
    loop_id(datapoint)
    sample_period(datapoint)
    profile_length(datapoint)
    max_detuning(datapoint)
    profile_values_matrix = cell2mat(new_prof_vals(datapoint))
    
%% Detuning and interpolation a specific example
    % this should be easyish to loop through and do for all but I wanted to
    % see if its correct before doing that.
    
    % grabbing two data points and the other values needed
    datapoint1 = 137;
    profile_values_matrix1 = cell2mat(new_prof_vals(datapoint1));
    sample_period1 = sample_period(datapoint1);
    profile_length1 = profile_length(datapoint1);
    max_detuning1 = max_detuning(datapoint1);
    
    datapoint2 = 30;
    profile_values_matrix2 = cell2mat(new_prof_vals(datapoint2));
    sample_period2 = sample_period(datapoint2);
    profile_length2 = profile_length(datapoint2);
    max_detuning2 = max_detuning(datapoint2);
    
    % plot to get an idea of what they originally look like (0-255)
    figure;
    hold on;
    dtw(profile_values_matrix1,profile_values_matrix2);
    
    %% Detune the profile values 
    % assumes going from range 0-255 to 0-maxdetune
    profile_values_matrix1 = (profile_values_matrix1.*max_detuning1)./255;
    profile_values_matrix2 = (profile_values_matrix2.*max_detuning2)./255;
    
    % plot the detuned values to see whats changed (0-maxdetune)
    figure;
    hold on;
    dtw(profile_values_matrix1,profile_values_matrix2);
    
    %% Interpolating the profile values
    %  This may not be needed, its done under the assumption that we are
    %  missing datapoints between each profile value. So interpolating
    %  between with linear or spline iterpolation could potentially give
    %  better results. This is something we should probably look at but
    %  whether or not its neccesary is another story... My guess would be
    %  that where there is only a low amount of profile values
    %  interpolation could be used to improve results
    
    time1 = 1:profile_length1;
    interp_time1 = 1:(1/sample_period1):profile_length1;
    interp_profile_values_1 = interp1(time1,profile_values_matrix1,interp_time1,'spline');
    
    % Plot to see whats changes 
    figure
    hold on;
    plot(time1,profile_values_matrix1)
    plot(time1,profile_values_matrix1,'o',interp_time1,interp_profile_values_1,':.');
    title('Profile values plotted against its interpolated values')
    

end



